package algorithm.DP;
/**
 *问题描述：有1元，3元，5元三种硬币，问凑够11元硬币最少需要多少枚硬币
 *
 *********思路**********
 *动态规划方法
 *重点记住两点：1状态，2状态转移方程
 * 状态：描述该子问题的解
 * 
 ********问题分析**********
 *以D[i]表示凑够i元硬币需要的最少硬币数
 *那么手动推演一部分：
 *D[0]={不需要硬币}=0
 *D[1]={需要1枚一元硬币}=D[1-1]+1=1
 *D[2]={需要2枚一元硬币}=D[2-1]+1=2
 *D[3]=min{需要1枚三元硬币，需要3枚一元硬币}=min{D[3-3]+1,D[3-1]+1}=1;
 *D[4]=min{需要1枚三元硬币和1枚一元硬币，需要4枚一元硬币}=min{D[4-3]+1,D[4-1]+1}
 *D[5]=min{需要1枚5元硬币，需要一枚三元硬币和2枚一元硬币，需要5枚1元硬币}=min{D[5-5]+1,D[5-3]+1,D[5-1]+1}
 *....
 *状态转移公式
 *D[i]=min{D[i-Tj]+1} Tj={1,3,5}
 *
 */
public class minCoinsNumber {
	public static void main(String[] args) {
		int[] T = {1,3,5};
		int[] D = new int[11];
	
		D[0] = 0 ;
		for(int i=1;i<D.length;i++){
			D[i] = Integer.MAX_VALUE;
			for(int j=0;j<T.length;j++){
				if(i>=T[j]&&D[i]>(D[i-T[j]]+1)){
					
					D[i]= D[i-T[j]]+1;
				}
			}
		}
		System.out.println(D[10]);
	
	}
}
